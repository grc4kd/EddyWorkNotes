@page "/worknotesmd"
@using System.Text
@using DataEntities
@using Microsoft.EntityFrameworkCore
@using System.Web
@using ui.Components.Validators
@using ui.Data
@using Markdig

@inject WorkNoteRepository WorkNoteRepository

<PageTitle>Markdown Report</PageTitle>

<h3>Markdown Report</h3>

@if (isLoading)
{
    <p>Loading work notes...</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">
        @error
    </div>
}
else if (string.IsNullOrEmpty(MarkdownPreview))
{
    <p>No work notes found for the last 16 hours or current date.</p>
}
else
{
    <div class="markdown-report">
        <h4>Work Notes</h4>
        <div class="report-content">
            @((MarkupString)MarkdownPreview)
        </div>
    </div>
}

<style>
    .markdown-report {
        margin: 20px 0;
    }

    .report-content {
        border: 1px solid #ccc;
        padding: 15px;
        background-color: #f9f9f9;
        white-space: normal;
    }
</style>

@code {
    [Inject]
    public EddyWorkNotesContext Context { get; set; } = default!;

    private string MarkdownPreview = string.Empty;
    private bool isLoading = true;
    private string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            // Get work notes from the last 16 hours or current date
            var sixteenHoursAgo = DateTime.UtcNow.AddHours(-16);
            var workNotes = await WorkNoteRepository.GetWorkNotesSince(sixteenHoursAgo);

            // Concatenate all descriptions
            var sb = new StringBuilder();
            foreach (var note in workNotes)
            {
                if (!string.IsNullOrWhiteSpace(note.Description))
                {
                    sb.Append("### Date/Time: ");
                    sb.AppendLine(note.RecordedAtTimeUtc.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss"));
                    sb.AppendLine();
                    sb.AppendLine(MarkdownValidator.SanitizeMarkdown(note.Description));
                    sb.AppendLine();
                    sb.AppendLine("---");
                    sb.AppendLine();
                }
            }

            var markdownContent = sb.ToString().Trim();

            // Use Markdig to render markdown to HTML
            var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .Build();

            MarkdownPreview = Markdown.ToHtml(markdownContent, pipeline);
        }
        catch (Exception ex)
        {
            error = $"Error loading work notes: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}