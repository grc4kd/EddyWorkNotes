@page "/tasktimer"
@using System.Threading.Tasks
@using ui.Components.State
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Task Timer</PageTitle>

<h3>Task Timer</h3>

<div class="card" style="width: 400px;">
    <div class="card-body">
        <h3 class="card-title">Pomodoro Timer</h3>

        <div class="mb-3">
            <p>Time:&nbsp;
                <span id='timerDisplay'>@FormatTime()</span>
            </p>
            <p>Current Phase: @CurrentPhase</p>
            <p>Status: @State.TimerStatus</p>
        </div>

        <button @onclick="StartTimerCycleAsync" class="btn btn-primary me-2">Start</button>
        <button @onclick="TogglePauseResumeAsync" class="btn btn-warning">@TogglePauseResumeText</button>
    </div>
</div>

@code {
    private static readonly TimeSpan WorkTimeSpan = TimeSpan.FromMinutes(1);
    private static readonly TimeSpan BreakTimeSpan = TimeSpan.FromMinutes(1);

    private ITaskTimer? _taskTimer = new Eddy.TaskTimer(WorkTimeSpan);
    public TaskTimerState State { get; private set; } = new("Stopped");
    public string CurrentPhase { get; private set; } = "Work";
    private string TogglePauseResumeText => State.TimerStatus == "Paused" ? "Resume" : "Pause";

    private IJSObjectReference? module;

    protected override async Task OnInitializedAsync()
    {
        _taskTimer = new Eddy.TaskTimer(WorkTimeSpan);
        if (_taskTimer != null)
        {
            _taskTimer.TimerCompleted += OnTaskTimerCompleted;
        }

        await Task.CompletedTask;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && module is null)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/TaskTimer.razor.js");
        }
    }

    private async void OnTaskTimerCompleted(object? sender, EventArgs e)
    {
        // Switch to the next phase
        CurrentPhase = CurrentPhase == "Work" ? "Break" : "Work";
        StateHasChanged();

        // Start the break timer if it's a break phase
        if (CurrentPhase == "Break")
        {
            await CreatePhaseTimerAsync(BreakTimeSpan);
        }
    }

    public async ValueTask DisposeAsync()
    {
        ArgumentNullException.ThrowIfNull(_taskTimer);

        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
                // Handle exceptions if client JS module is disconnected
            }
        }

        _taskTimer.TimerCompleted -= OnTaskTimerCompleted;
    }

    private async Task TogglePauseResumeAsync()
    {
        ArgumentNullException.ThrowIfNull(module);
        ArgumentNullException.ThrowIfNull(_taskTimer);

        if (State.TimerStatus == "Paused")
        {
            await module.InvokeVoidAsync("togglePause");
            await _taskTimer.ResumeAsync();
        }
        else if (State.TimerStatus == "Running")
        {
            await module.InvokeVoidAsync("togglePause");
            State = new("Paused");
            _taskTimer.Pause();
        }
    }

    public async Task StartTimerCycleAsync()
    {
        // only start the timer if it was previously stopped
        if (State.IsStopped)
        {
            await CreatePhaseTimerAsync(WorkTimeSpan);
        }

        // automatically start the break cycle
        if (CurrentPhase == "Break" && State.IsStopped)
        {
            await CreatePhaseTimerAsync(BreakTimeSpan);
        }
    }

    private async Task CreatePhaseTimerAsync(TimeSpan duration)
    {
        // Start client-side timer first
        if (module != null)
        {
            await module.InvokeVoidAsync("run", duration.TotalSeconds);
        }

        // Update page state to running
        State = new("Running");
        StateHasChanged();

        // Then, after the page state is up-to-date, wait for the server-side timer task to complete
        _taskTimer = new Eddy.TaskTimer(duration);
        await _taskTimer.StartAsync();

        // Change to the next phase automatically
        if (CurrentPhase == "Work") {
            CurrentPhase = "Break";
        }

        State = new("Stopped");
        StateHasChanged();
    }

    private string FormatTime()
    {
        var format = "";
        
        if (_taskTimer == null) {
            format = string.Empty;
        } else {
            format = _taskTimer.Period.ToString(@"mm\:ss");
        }
        
        return format;
    }
}