@page "/tasktimer"
@using System.Threading.Tasks
@using System.Reflection
@using ui.Components.Models
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject TaskTimerService taskTimerService
@inject NotifierService notifierService
@inject ILogger<TaskTimer> Logger

<PageTitle>Task Timer</PageTitle>

<h3>Task Timer</h3>

<div class="card container-md">
    <div class="card-body container-sm">
        <h3 class="card-title">Active Timer</h3>
        <div class="mb-2">
            <div class="mb-2" asp-for="timeRemaining">
                Time Remaining
                <div id='timerDisplay' class="mb-3">@TimeRemaining</div>
            </div>
        </div>
        <p>Current Phase: @CurrentPhase</p>
        <p>Status: @CurrentState</p>
        <button @onclick="StartTimer" class="btn btn-primary" disabled="@CurrentState.IsRunning">Start</button>
    </div>

    <div class="card-body container-sm">
        <div class="container-sm">
            <EditForm Model="Model" OnValidSubmit="Submit" FormName="WorkNotes">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <label>
                        @if (CurrentState.IsRunning && CurrentPhase == "Work")
                        {
                            <p>Note (cycle @(CurrentWorkCycle + 1) of @WorkCycles)</p>
                        }
                        else
                        {
                            <p><u>work timer off</u></p>
                        }
                        <div class="row">
                            <InputTextArea @bind-Value="Model!.Description" />
                        </div>
                    </label>
                    <div class="pt-4">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="card-body container-sm">
            <h3 class="mb-3">History</h3>
            @if (completedSessions.Any())
            {
                <div class="d-flex flex-column">
                    @foreach (var session in completedSessions)
                    {
                        <div class="card my-2">
                            <div class="card-body">
                                <p class="card-text"><small class="text-muted">Recorded at
                                        @session.CompletedAt.ToShortTimeString()</small></p>
                                <p class="card-text">@session.WorkNotes</p>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No cycles completed yet.</p>
            }
        </div>
    </div>
</div>

<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="liveToast" class="toast @HideToast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Task Timer</strong>
            <small>Cycle complete: @LastCycleCompletedAt</small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            On a short break for <em>@(options.BreakTimeSpan.TotalMinutes)</em> minutes. Be right back!
        </div>
    </div>
</div>

@code {
    // Razor Page constant variables
    private const int WorkCycles = 4;

    // DTOs and model class reference types
    public TimeSpan TimeRemaining { get; private set; }
    public TaskTimerState CurrentState { get; private set; } = TaskTimerState.Stopped;
    private TaskTimerOptions options = new();
    private IEnumerable<TimerSession> completedSessions = [];
    private IJSObjectReference? module;

    // primitive type state variables
    public string CurrentPhase { get; set; } = "";
    public string LastCycleCompletedAt => completedSessions.Any() ? completedSessions.Last().CompletedAt.ToLongTimeString()
    : "(no time recorded)";
    private int Elapsed = 0;
    private int CurrentWorkCycle = 0;
    private string HideToast => CurrentPhase == "Break" ? "show" : "hide";

    // EditForm variables
    [SupplyParameterFromForm]
    private WorkNotes? Model { get; set; }

    protected override void OnInitialized() => Model ??= new();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && module is null)
        {
            CurrentPhase = "Work";
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/TaskTimer.razor.js");
            Model = new WorkNotes();
        }

        if (firstRender && notifierService is not null)
        {
            Func<string, int, Task>? subscriber = async (a, b) =>
            {
                Elapsed++;
                await Task.CompletedTask;
            };

            notifierService.Notify += subscriber;
        }
    }

    /// <summary>
    /// Process form submission and update completed work notes. Do not submit empty notes or duplicate notes.
    /// Trim notes before comparison, but submit all data previously validated in the EditForm.
    /// </summary>
    private void Submit()
    {
        static string trimNotes(WorkNotes notes) => (notes != null && !string.IsNullOrWhiteSpace(notes.Description)) ?
        notes!.Description!.Trim() : string.Empty;

        bool isInputBlank = (Model == null || string.IsNullOrWhiteSpace(Model?.Description));

        if (Model != null && !isInputBlank && completedSessions.All(s => s.WorkNotes?.Trim() != trimNotes(Model)))
        {
            Logger.LogInformation("Work notes submitted. Description = {Description}", Model!.Description);
            completedSessions = completedSessions.Prepend(new TimerSession("Work", options.WorkTimeSpan, DateTime.Now,
            Model!.Description));
            Model!.Description = "";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
                // Handle exceptions if client JS module is disconnected
                Logger.LogWarning("JavaScript module disconnected, EditForm Model state: {Model}", Model);
                taskTimerService.Cancel();
            }
        }
    }

    public async Task StartTimer()
    {
        Elapsed = 0;

        CurrentPhase = "Work";
        CurrentState = TaskTimerState.Running;
        StateHasChanged();

        while (CurrentWorkCycle < WorkCycles)
        {
            await HandleCycleAsync(options.WorkTimeSpan, "Work");
            CurrentWorkCycle++;

            // if all but the last break cycle have raised elapsed events, skip the last break timer
            if (CurrentWorkCycle < WorkCycles)
            {
                await HandleCycleAsync(options.BreakTimeSpan, "Break");
            }
        }

        TimeRemaining = TimeSpan.Zero;
        CurrentState = TaskTimerState.Stopped;
        CurrentPhase = $"Stopped after {CurrentWorkCycle} cycles.";
        StateHasChanged();
    }

    private async Task HandleCycleAsync(TimeSpan timeRemaining, string phase)
    {
        ArgumentOutOfRangeException.ThrowIfNullOrWhiteSpace(phase);

        TimeRemaining = timeRemaining;
        CurrentPhase = phase;
        StateHasChanged();

        module?.InvokeVoidAsync("run", TimeRemaining.TotalSeconds);
        await taskTimerService.StartAsync(TimeRemaining);
    }
}