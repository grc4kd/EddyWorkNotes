@page "/tasktimer"
@using System.Threading.Tasks
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Task Timer</PageTitle>

<h3>Task Timer</h3>

<div class="card" style="width: 400px;">
    <div class="card-body">
        <h3 class="card-title">Pomodoro Timer</h3>

        <div class="mb-3">
            <p>Time:&nbsp
                <span id='timerDisplay'>@FormatTime(_taskTimer.RemainingSeconds)</span>
            </p>
            <p>Current Phase: @CurrentPhase</p>
            <p>Status: @TimerStatus</p>
        </div>

        <button @onclick="StartTimerAsync" class="btn btn-primary me-2">Start</button>
        <button @onclick="TogglePauseAsync" class="btn btn-warning">@TogglePauseText</button>
    </div>
</div>

@code {
    private const int DefaultWorkMinutes = 1;
    private const int DefaultBreakMinutes = 1;

    private Eddy.TaskTimer _taskTimer = new Eddy.TaskTimer(DefaultWorkMinutes, DefaultBreakMinutes);
    public string TimerStatus { get; protected set; } = "Idle";
    private string CurrentPhase { get; set; } = string.Empty;
    private string TogglePauseText { get { return _taskTimer.IsRunning ? "Pause" : "Resume"; } }
    private IJSObjectReference? module;

    protected override Task OnInitializedAsync()
    {
        void onTimerStopped(object? sender, EventArgs eventArgs) { 
            TimerStatus = $"{CurrentPhase} timer stopped.";
            InvokeAsync(StateHasChanged);
        }
        _taskTimer.TimerCompleted += onTimerStopped;
        return Task.CompletedTask;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/TaskTimer.razor.js");
            await module.InvokeVoidAsync("init");
        }
    }

    public async Task TogglePauseAsync()
    {
        if (module != null && _taskTimer.IsRunning)
        {
            await module.InvokeVoidAsync("pause");
            _taskTimer.TogglePause();
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

    public async Task StartTimerAsync()
    {
        async Task createTimerAsync(int durationSeconds)
        {
            // start client-side timer first
            if (module != null)
            {
                await module.InvokeVoidAsync("run", durationSeconds);
            }

            // update page state
            CurrentPhase = _taskTimer.IsWorkTime ? "Work" : "Break";
            TimerStatus = $"Started {CurrentPhase} timer.";
            await InvokeAsync(StateHasChanged);
        }

        // Only start timer if not currently running / stopped
        // Run work timer first (if starting with work)
        if (!_taskTimer.IsRunning && _taskTimer.IsWorkTime)
        {
            await createTimerAsync(60 * _taskTimer.WorkMinutes);
            await _taskTimer.StartAsync();
            _taskTimer.IsWorkTime = false;
        }

        // Then, run break timer. Then stop timer.
        if (_taskTimer.IsRunning && !_taskTimer.IsWorkTime)
        {
            await createTimerAsync(60 * _taskTimer.BreakMinutes);
            await _taskTimer.StartAsync();
        }
    }

    private string FormatTime(double? seconds)
    {
        string format = "";

        // set time to zero on null inputs
        seconds ??= 0;

        if (seconds > 0) {
            int minutes = (int)(seconds / 60);
            int remainingSeconds = (int)seconds % 60;
            format = $"{minutes:D2}:{remainingSeconds:D2}";
        }

        return format;
    }
}