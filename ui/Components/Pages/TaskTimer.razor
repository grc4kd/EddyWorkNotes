@page "/tasktimer"
@rendermode InteractiveServer

<PageTitle>Task Timer</PageTitle>

<h3>Task Timer</h3>

<div class="card" style="width: 400px;">
    <div class="card-body">
        <h3 class="card-title">Pomodoro Timer</h3>
        
        @if (IsInitialized)
        {
            <div class="mb-3">
                <p>Remaining Time: @FormatTime(_taskTimer.RemainingTime)</p>
                <p>Current Phase: @(_taskTimer.IsWorkTime ? "Work" : "Break")</p>
                <p>Status: @TimerStatus</p>
            </div>
            
            <button @onclick="StartTimer" class="btn btn-primary me-2">
                Start
            </button>
            
            <button @onclick="TogglePause" class="btn btn-warning">
                @(_taskTimer.IsRunning ? "Pause" : "Resume")
            </button>
        }
    </div>
</div>

@code {
    private Eddy.TaskTimer _taskTimer = new Eddy.TaskTimer();
    private bool IsInitialized { get; set; } = false;
    private string TimerStatus { get; set; } = "Idle";

    protected override async Task OnInitializedAsync()
    {
        IsInitialized = true;
        
        StateHasChanged();

        await Task.Yield();
    }

    private async Task StartTimer()
    {
        if (!_taskTimer.IsRunning)
        {
            TimerStatus = $"Started {(_taskTimer.IsWorkTime ? "work" : "break")} timer";
            StateHasChanged();

            await _taskTimer.StartAsync().ConfigureAwait(false);
        }
    }

    private void TogglePause()
    {
        _taskTimer.TogglePause();
        TimerStatus = _taskTimer.IsRunning ? "Paused" : "Resumed";
        StateHasChanged();
    }

    private string FormatTime(double seconds)
    {
        int minutes = (int)(seconds / 60);
        double remainingSeconds = seconds % 60;
        
        return $"{minutes:D2}:{remainingSeconds:N1}";
    }
}
