@page "/tasktimer"
@using System.Threading.Tasks
@using ui.Components.Models
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject TaskTimerService taskTimerService
@inject NotifierService notifierService
@inject ILogger<TaskTimer> Logger

<PageTitle>Task Timer</PageTitle>

<h3>Task Timer</h3>

<div class="card container-md">
    <div class="card-body container-sm">
        <h3 class="card-title">Active Timer</h3>

        <div class="mb-2">
            <div class="mb-2" asp-for="timeRemaining">
                Time Remaining
                <div id='timerDisplay' class="mb-3">@TimeRemaining</div>
            </div>
        </div>
        <p>Current Phase: @CurrentPhase</p>
        <p>Status: @CurrentState</p>
        <button @onclick="StartTimer" class="btn btn-primary">Start</button>
    </div>

    <div class="card-body container-sm">
        <h3>Active Data</h3>
        @if (CurrentState == TaskTimerState.Running && CurrentPhase == "Work")
        {
            <div class="container-sm">
                <h4>Work Notes</h4>
                <EditForm Model="Model" OnValidSubmit="Submit" FormName="WorkNotes" >
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    
                    <div class="row">
                        <label>
                            (cycle [@(elapsedCount+1)/@totalCycleCount])
                            <div class="row">
                                <InputTextArea @bind-Value="Model!.Description" />
                            </div>
                        </label>
                        <div class="pt-4">
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        }
        else
        {
            <div class="container-sm">
                <p>Not recording <u>Work Notes</u> right now.
                    @if (CurrentPhase == "Break")
                    {
                        <span><em>On Break</em></span>
                    }
                </p>
            </div>
        }
    </div>

    <div class="card-body container-sm">
        <h3 class="mb-3">Completed Cycles</h3>
        @if (completedSessions.Any())
        {
            <div class="d-flex flex-column">
                @foreach (var session in completedSessions)
                {
                    <div class="card my-2">
                        <div class="card-body">
                            <h5 class="card-title">@session.Message</h5>
                            <p class="card-text">Duration: @session.Period.ToString(@"mm\:ss")</p>
                            <p class="card-text"><small class="text-muted">Finished at
                                    @session.CompletedAt.ToShortTimeString()</small></p>
                            <p class="card-text">@session.WorkNotes</p>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No cycles completed yet.</p>
        }
    </div>
</div>

@code {
    // work and break cycles counted twice
    // skip the last break cycle (-1)
    private const int cycleCount = 4;
    private static int totalCycleCount => (2 * cycleCount) - 1;
    private static readonly TimeSpan WorkTimeSpan = TimeSpan.FromMinutes(25);
    private static readonly TimeSpan BreakTimeSpan = TimeSpan.FromMinutes(5);

    public TimeSpan TimeRemaining { get; private set; }
    public string CurrentPhase { get; set; } = string.Empty;
    public TaskTimerState CurrentState { get; private set; } = new(TaskTimerStateValue.Stopped);
    private string TogglePauseResumeText => CurrentState.IsPaused ? "Resume" : "Pause";
    private List<TimerSession> completedSessions = new();

    private IJSObjectReference? module;
    private int elapsedCount = 0;

    [SupplyParameterFromForm]
    private WorkNotes? Model { get; set; }

    protected override void OnInitialized() =>
    Model ??= new() { Description = string.Empty };

    private void Submit()
    {
        Logger.LogInformation("Work notes submitted. Description = {Description}", Model?.Description);
    }

    private void Store()
    {
        completedSessions.Add(new TimerSession("Work", WorkTimeSpan, DateTime.Now, Model?.Description));
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && module is null)
        {
            CurrentPhase = "Work";
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/TaskTimer.razor.js");
        }

        if (firstRender && notifierService is not null)
        {
            Func<string, int, Task>? subscriber = (a, b) =>
            {
                elapsedCount++;

                return Task.FromResult(elapsedCount);
            };

            notifierService.Notify += subscriber;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
                // Handle exceptions if client JS module is disconnected
            }
        }
    }

    public async Task StartTimer()
    {
        elapsedCount = 0;

        CurrentPhase = "Work";
        CurrentState = TaskTimerState.Running;

        while (elapsedCount < totalCycleCount)
        {
            TimeRemaining = WorkTimeSpan;
            CurrentPhase = "Work";
            StateHasChanged();

            // start a javascript timer on the client
            module?.InvokeVoidAsync("run", WorkTimeSpan.TotalSeconds);
            // then, call and wait for the periodic timer on the server
            try
            {
                await taskTimerService.StartAsync(WorkTimeSpan);
            }
            catch (OperationCanceledException ex)
            {
                if (ex.CancellationToken.IsCancellationRequested)
                {
                    // stop cancelled timers on the client
                    module?.InvokeVoidAsync("stop");
                    // update page state
                    TimeRemaining = TimeSpan.Zero;
                    CurrentState = TaskTimerState.Stopped;
                }
            }
            StateHasChanged();

            // add all sessions, including cancelled timers, to the list of completed sessions
            Store();

            if (Model is not null) {
                Model.Description = string.Empty;
            }

            // skip the last break time (long break after span of work)
            if (elapsedCount < totalCycleCount)
            {
                TimeRemaining = BreakTimeSpan;
                CurrentPhase = "Break";
                StateHasChanged();

                module?.InvokeVoidAsync("run", BreakTimeSpan.TotalSeconds);
                await taskTimerService.StartAsync(BreakTimeSpan);
            }
        }

        TimeRemaining = TimeSpan.Zero;
        CurrentState = TaskTimerState.Stopped;
        CurrentPhase = $"Stopped after {elapsedCount} cycles.";
        StateHasChanged();
    }
}