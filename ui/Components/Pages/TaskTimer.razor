@page "/tasktimer"
@using System.Threading.Tasks
@using ui.Components.State
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject TaskTimerService taskTimerService
@inject NotifierService notifierService

<PageTitle>Task Timer</PageTitle>

<h3>Task Timer</h3>

<div class="card" style="width: 400px;">
    <div class="card-body">
        <h3 class="card-title">Pomodoro Timer</h3>

        <div class="mb-3">
            <div class="mb-3" asp-for="timeRemaining">
                Time Remaining
                <div id='timerDisplay' class="mb-6 float-end">@TimeRemaining</div>
            </div>
        </div>

        <p>Current Phase: @CurrentPhase</p>
        <p>Status: @CurrentState</p>
    </div>

    <button @onclick="StartTimer" class="btn btn-primary m-2">Start</button>
</div>

@code {
    private static readonly TimeSpan WorkTimeSpan = TimeSpan.FromMinutes(25);
    private static readonly TimeSpan BreakTimeSpan = TimeSpan.FromMinutes(5);

    public TimeSpan TimeRemaining { get; private set; }
    public string CurrentPhase { get; set; } = string.Empty;
    public TaskTimerState CurrentState { get; private set; } = new(TaskTimerStateValue.Stopped);
    private string TogglePauseResumeText => CurrentState.IsPaused ? "Resume" : "Pause";

    private IJSObjectReference? module;
    private int elapsedCount = 0;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && module is null)
        {
            CurrentPhase = "Work";
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/TaskTimer.razor.js");
        }

        if (firstRender && notifierService is not null)
        {
            Func<string, int, Task>? subscriber = (a, b) =>
            {
                elapsedCount++;

                return Task.FromResult(elapsedCount);
            };

            notifierService.Notify += subscriber;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
                // Handle exceptions if client JS module is disconnected
            }
        }
    }

    public async Task StartTimer()
    {
        elapsedCount = 0;

        // work and break cycles counted twice
        var cycleCount = 4;
        var totalCycleCount = cycleCount * 2;

        CurrentPhase = "Work";
        CurrentState = TaskTimerState.Running;

        while (elapsedCount < totalCycleCount)
        {
            TimeRemaining = WorkTimeSpan;
            CurrentPhase = "Work";
            StateHasChanged();

            // start a javascript timer on the client
            module?.InvokeVoidAsync("run", WorkTimeSpan.TotalSeconds);
            // then, call and wait for the periodic timer on the server
            await taskTimerService.StartAsync(WorkTimeSpan);

            TimeRemaining = BreakTimeSpan;
            CurrentPhase = "Break";
            StateHasChanged();

            module?.InvokeVoidAsync("run", BreakTimeSpan.TotalSeconds);
            await taskTimerService.StartAsync(BreakTimeSpan);
        }

        TimeRemaining = TimeSpan.Zero;
        CurrentState = TaskTimerState.Stopped;
        CurrentPhase = $"Stopped after {elapsedCount} cycles.";
        StateHasChanged();
    }
}