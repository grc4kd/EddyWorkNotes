@page "/tasktimer"
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Task Timer</PageTitle>

<h3>Task Timer</h3>

<div class="card" style="width: 400px;">
    <div class="card-body">
        <h3 class="card-title">Pomodoro Timer</h3>

        <div class="mb-3">
            <p>Remaining Time:&nbsp 
                <span id='timerDisplay'>@FormatTime(_taskTimer.RemainingTime)</span>
            </p>
            <p>Current Phase: @(_taskTimer.IsWorkTime ? "Work" : "Break")</p>
            <p>Status: @TimerStatus</p>
        </div>

        <button @onclick="StartTimer" id="startTimerBtn" class="btn btn-primary me-2">
            Start
        </button>
        
        <button @onclick="TogglePause" id="togglePauseBtn" class="btn btn-warning">
            @(_taskTimer.IsRunning ? "Pause" : "Resume")
        </button>
    </div>
</div>

@code {
    private Eddy.TaskTimer _taskTimer = new Eddy.TaskTimer(25, 5);
    private string TimerStatus { get; set; } = "Idle";
    private double CurrentRemainingTime { get; set; } = 25;
    private IJSObjectReference? module;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
            "./Components/Pages/TaskTimer.razor.js");

            bool isWorkTime = _taskTimer.IsWorkTime;
            int[] timeArgs = [_taskTimer.WorkDuration, _taskTimer.BreakDuration];
            await module.InvokeVoidAsync("addHandlers", isWorkTime, timeArgs);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

    private async Task StartTimer()
    {
        if (!_taskTimer.IsRunning)
        {
            TimerStatus = $"Started {(_taskTimer.IsWorkTime ? "work" : "break")} timer";
            StateHasChanged();

            // Capture the initial remaining time
            CurrentRemainingTime = _taskTimer.RemainingTime;

            await _taskTimer.StartAsync().ConfigureAwait(false);

            // Final update when timer completes
            CurrentRemainingTime = _taskTimer.RemainingTime;
        }
    }

    private void TogglePause()
    {
        _taskTimer.TogglePause();
        TimerStatus = _taskTimer.IsRunning ? "Paused" : "Resumed";
        StateHasChanged();
    }

    private string FormatTime(double seconds)
    {
        int minutes = (int)(seconds / 60);
        int remainingSeconds = (int)seconds % 60;

        return $"{minutes:D2}:{remainingSeconds:D2}";
    }
}