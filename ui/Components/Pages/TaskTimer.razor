@page "/tasktimer"
@using System.Threading.Tasks
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Task Timer</PageTitle>

<h3>Task Timer</h3>

<div class="card" style="width: 400px;">
    <div class="card-body">
        <h3 class="card-title">Pomodoro Timer</h3>

        <div class="mb-3">
            <p>Remaining Time:&nbsp
                <span id='timerDisplay'>@FormatTime(_taskTimer.RemainingSeconds)</span>
            </p>
            <p>Current Phase: @CurrentPhase</p>
            <p>Status: @TimerStatus</p>
        </div>

        <button @onclick="StartTimerAsync" class="btn btn-primary me-2">Start</button>
        <button @onclick="TogglePauseAsync" class="btn btn-warning">@(_taskTimer.IsRunning ? "Pause" : "Resume")</button>
    </div>
</div>

@code {
    private const int DefaultWorkMinutes = 25;
    private const int DefaultBreakMinutes = 5;

    private Eddy.TaskTimer _taskTimer = new Eddy.TaskTimer(DefaultWorkMinutes, DefaultBreakMinutes);
    private string TimerStatus { get; set; } = "Idle";
    private string CurrentPhase { get; set; } = string.Empty;
    private IJSObjectReference? module;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/TaskTimer.razor.js");
            await module.InvokeVoidAsync("init", _taskTimer.WorkMinutes);
        }
    }

    public async Task TogglePauseAsync()
    {
        if (module != null && _taskTimer.IsRunning)
        {
            await module.InvokeVoidAsync("pause");
        }

        TimerStatus = _taskTimer.IsRunning ? "Resumed" : "Paused";
        CurrentPhase = _taskTimer.IsWorkTime ? $"work ({TimerStatus})" : $"break ({TimerStatus})";

        _taskTimer.TogglePause();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

    public async Task StartTimerAsync()
    {
        // only start timer if not currently running / stopped
        if (!_taskTimer.IsRunning)
        {
            // start JavaScript timer first
            if (module != null)
            {
                await module.InvokeVoidAsync("start");
            }

            // update page state
            CurrentPhase = _taskTimer.IsWorkTime ? "Work" : "Break";
            TimerStatus = $"Started {CurrentPhase} timer.";
            var task = _taskTimer.StartAsync();
            
            // update page state, then wait for periodic timer
            StateHasChanged();            
            await task;
        }

        // update page state after timer is over or when timer not running
        CurrentPhase = _taskTimer.IsWorkTime ? "Work" : "Break";
        TimerStatus = $"Started {CurrentPhase} timer.";
    }

    private string FormatTime(double seconds)
    {
        int minutes = (int)(seconds / 60);
        int remainingSeconds = (int)seconds % 60;

        return $"{minutes:D2}:{remainingSeconds:D2}";
    }
}