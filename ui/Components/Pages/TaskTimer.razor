@page "/tasktimer"
@using System.Threading.Tasks
@using ui.Components.State
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Task Timer</PageTitle>

<h3>Task Timer</h3>

<div class="card" style="width: 400px;">
    <div class="card-body">
        <h3 class="card-title">Pomodoro Timer</h3>

        <div class="mb-3">
            <p>Time:&nbsp
                <span id='timerDisplay'>@FormatTime(_taskTimer.Period)</span>
            </p>
            <p>Current Phase: @CurrentPhase</p>
            <p>Status: @State</p>
        </div>

        <button @onclick="StartTimerCycleAsync" class="btn btn-primary me-2">Start</button>
        <button @onclick="TogglePauseAsync" class="btn btn-warning">@TogglePauseText</button>
    </div>
</div>

@code {
    private static readonly TimeSpan WorkTimeSpan = TimeSpan.FromMinutes(25);
    private static readonly TimeSpan BreakTimeSpan = TimeSpan.FromMinutes(5);

    public ITaskTimer _taskTimer = new Eddy.TaskTimer(WorkTimeSpan);
    public TaskTimerState State { get; private set; } = new("Stopped");
    public string CurrentPhase { get; private set; } = string.Empty;
    private string TogglePauseText { get { return State.TimerStatus == "Idle" ? "Resume" : "Pause"; } }
    private IJSObjectReference? module;

    protected override Task OnInitializedAsync()
    {
        void onTimerStopped(object? sender, EventArgs eventArgs)
        {
            State = new("Stopped");
            StateHasChanged();
        }
        _taskTimer.TimerCompleted += onTimerStopped;
        return Task.CompletedTask;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/TaskTimer.razor.js");
        }
    }

    async Task TogglePauseAsync()
    {
        ArgumentNullException.ThrowIfNull(module);
        if (State.TimerStatus == "Stopped")
        {
            await module.InvokeVoidAsync("run", _taskTimer.Period.TotalSeconds);
            await _taskTimer.ResumeAsync();
            State = new("Resumed");
        }
        else
        {
            await module.InvokeVoidAsync("togglePause");
            _taskTimer.Pause();
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

    public async Task CreatePhaseTimerAsync(TimeSpan duration)
    {
        // start client-side timer first
        if (module != null)
        {
            await module.InvokeVoidAsync("run", duration.TotalSeconds);
        }

        // update razor page state
        CurrentPhase = CurrentPhase == "Work" ? "Break" : "Work";
        State = new("Running");
        StateHasChanged();

        // wait for the server-side timer task to complete
        _taskTimer = new Eddy.TaskTimer(duration);
        await _taskTimer.StartAsync();
    }

    public async Task StartTimerCycleAsync()
    {
        await CreatePhaseTimerAsync(WorkTimeSpan);

        // run the timer for a second time on ending the work phase
        if (CurrentPhase == "Work")
        {
            await CreatePhaseTimerAsync(BreakTimeSpan);
        }

        // set the final state after all timers are complete
        State = new("Stopped");
    }

    string FormatTime(TimeSpan timespan)
    {
        return timespan.ToString(@"mm\:ss");
    }

    
}

