@page "/tasktimer"
@using System.Threading.Tasks
@using System.Reflection
@using Markdig
@using Markdig.Parsers
@using Markdig.Renderers
@using Microsoft.EntityFrameworkCore
@using Microsoft.IdentityModel.Tokens
@using ui.Components.Models
@using ui.Data
@rendermode InteractiveServer
@implements IAsyncDisposable

@inject IJSRuntime JS
@inject TaskTimerService Timer
@inject NotifierService Notifier
@inject ILogger<TaskTimer> Logger
@inject MarkdownPipelineBuilder MarkdownPipelineBuilder
@inject EddyWorkNotesContext EddyWorkNotesContext
@inject TimerCycleService TimerCycle

<PageTitle>Task Timer</PageTitle>

<h3>Task Timer</h3>

<div class="card container-md">
    <div class="card-body container-sm">
        <h3 class="card-title">Active Timer</h3>
        <div class="mb-2">
            <div class="mb-2" asp-for="timeRemaining">
                Time Remaining
                <div id='timerDisplay' class="mb-3">@(TimeRemaining.ToString(@"mm\:ss")) remaining</div>
            </div>
        </div>
        <p>Current Phase: @(Timer.CurrentPhase)</p>
        <p>Status: @(CurrentState)</p>
        <button @onclick="StartTimer" class="btn btn-primary" disabled="@StartDisabled">Start</button>
        <button @onclick="SkipTimer" class="btn btn-secondary" disabled="@SkipDisabled">Skip</button>
    </div>

    <div class="card-body container-sm">
        <div class="container-sm">
            <EditForm Model="Model" OnValidSubmit="Submit" FormName="WorkNotes">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <label>
                        @if (Timer.IsRunning && CurrentPhase == "Work")
                        {
                            <p>Note (cycle @(TimerCycle.Cycle) of @CycleCount)</p>
                        }
                        else
                        {
                            <p><u>work timer off</u></p>
                        }
                        <div class="row">
                            <InputTextArea @bind-Value="Model!.Description" />
                        </div>
                    </label>
                    <div class="pt-4">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="card-body container-sm">
            <h3 class="mb-3">History</h3>
            @if (Sessions.Any())
            {
                <div class="d-flex flex-column">
                    @foreach (var session in Sessions)
                    {
                        <div class="card my-2">
                            <div class="card-body">
                                @if (@session.WorkNotes?.Length > 0)
                                {
                                    <p class="card-text"><small class="text-muted">Recorded at
                                            @session.CompletedAtLocaltime.ToShortTimeString()</small></p>
                                    <p class="my-2">@((MarkupString)parseNotes(session.WorkNotes))</p>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No cycles completed yet.</p>
            }
        </div>
    </div>
</div>

<!-- this toast is hidden by default, and controlled by CSS classes 'show' and 'hide' -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="toastNotification" class="toast @(ShowToast ? "show" : "hide")" role="alert" aria-live="assertive"
        aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Task Timer</strong>
            <small>Cycle complete: @LastCycleCompletedAt</small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" @onclick="() => ShowToast = false"
                aria-label="Close"></button>
        </div>
        <div class="toast-body">
            On a short break for <em>@(options.BreakTimeSpan.TotalMinutes)</em> minutes. Be right back!
        </div>
    </div>
</div>

@code {
    // Razor Page constant variables
    private const int CycleCount = 4;

    // DTOs and model class reference types
    public TimeSpan TimeRemaining => Timer.TimeRemaining;
    private TaskTimerOptions options = new();
    private IJSObjectReference? module;
    public TaskTimerState? CurrentState => Timer.IsRunning ? TaskTimerState.Running : TaskTimerState.Stopped; 
    private List<TimerSession> Sessions = [];

    // primitive type state variables
    public string CurrentPhase = string.Empty;
    public string LastCycleCompletedAt
    {
        get
        {
            if (Sessions.Any())
                return Sessions.OrderByDescending(k => k.CompletedAtUtc)
                .First().CompletedAtLocaltime.ToLongTimeString();
            else
                return "(no time recorded)";
        }
    }

    private bool ShowToast = false;

    // EditForm variables
    [SupplyParameterFromForm]
    private IWorkNotes? Model { get; set; }

    private MarkdownPipeline? MarkdownPipeline { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new WorkNote();

        MarkdownPipeline ??= MarkdownPipelineBuilder
        .UseDefinitionLists()
        .UseEmphasisExtras()
        .UseGridTables()
        .UseMathematics()
        .UseMediaLinks()
        .UsePipeTables()
        .UseListExtras()
        .UseTaskLists()
        .UseGenericAttributes()
        .Build();

        TimerCycle.Cycle = 0;
        CurrentPhase = Timer.CurrentPhase;

        // attach an event handler for notifications from the timer service
        Notifier.Notify += OnNotify;

        LoadSessions();
    }

    public async Task OnNotify(string key, int value)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // ensure to only setup JS interop on first render
        if (firstRender && module is null)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/TaskTimer.razor.js");
        }

        if (!Timer.IsRunning)
        {
            module?.InvokeVoidAsync("pause");
        }
    }

    private void LoadSessions()
    {
        if (!Sessions.Any())
        {
            Sessions = EddyWorkNotesContext.WorkNote.OrderDescending()
            .Where(w => w.RecordedAtTimeUtc.ToLocalTime() > (DateTime.Now.AddHours(-16)))
            .Select(w => new TimerSession(w))
            .ToList();
        }
    }

    public void Dispose() => Notifier.Notify -= OnNotify;

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            Timer.Pause();

            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
                // Handle exceptions if client JS module is disconnected
                Logger.LogWarning("JavaScript module disconnected with time remaining: {TimeRemaining} minutes", Timer.TimeRemaining.TotalMinutes);
            }
        }
    }

    private bool StartDisabled {
        get {
            if (Timer.IsRunning) {
                return true;
            }

            if (TimerCycle.Cycle >= CycleCount) {
                return true;
            }

            return false;
        }
    }

    private bool SkipDisabled {
        get {
            if (Timer.IsRunning && TimerCycle.Cycle <= CycleCount) {
                return false;
            }
            
            return true;
        }
    }

    /// <summary>
    /// Process form submission and update completed work notes. Do not submit empty notes or duplicate notes.
    /// Trim notes before comparison, but submit all data previously validated in the EditForm.
    /// </summary>
    private void Submit()
    {
        bool isInputBlank = (Model == null || string.IsNullOrWhiteSpace(Model?.Description));

        string trimmedNotes = Model?.Description is not null ? trimNotes(Model) : string.Empty;
        string parsedNotes = trimmedNotes.Length > 0 ? parseNotes(trimmedNotes) : string.Empty;

        if (Model != null && !isInputBlank && Sessions.All(s => s.WorkNotes?.Trim() != trimmedNotes))
        {
            Logger.LogInformation("Work notes submitted.\n{parsedNotes}", trimmedNotes);

            var session = new TimerSession("Work", DateTime.UtcNow, trimmedNotes);
            var workNote = new DataEntities.WorkNote
            {
                Description = trimmedNotes,
                RecordedAtTimeUtc = session.CompletedAtUtc
            };

            EddyWorkNotesContext.WorkNote.Add(workNote);
            EddyWorkNotesContext.SaveChanges();

            // add notes to current session without reloading the page on inserting the last note
            Sessions = Sessions.Prepend(session).ToList();

            // clear the active notes once completed session notes are stored
            Model!.Description = "";
        }
    }

    static string trimNotes(IWorkNotes notes) => (notes != null && !string.IsNullOrWhiteSpace(notes.Description)) ?
    notes!.Description!.Trim() : string.Empty;

    string parseNotes(string markdown) => Markdown.ToHtml(markdown, MarkdownPipeline);

    public async Task StartTimer()
    {
        var cts = Timer.cancellationTokenSource;

        while (TimerCycle.Cycle < CycleCount && !cts.IsCancellationRequested)
        {
            TimerCycle.Cycle++;

            await HandleCycleAsync(options.WorkTimeSpan, "Work");

            // skip the last break timer
            if (TimerCycle.Cycle < CycleCount && !cts.IsCancellationRequested)
            {
                await HandleCycleAsync(options.BreakTimeSpan, "Break");
            }
        }
    }

    public async Task SkipTimer() {
        module?.InvokeVoidAsync("pause");
        StateHasChanged();

        await Timer.SkipAsync();
    }

    private async Task HandleCycleAsync(TimeSpan cycleTime, string phase)
    {
        ArgumentOutOfRangeException.ThrowIfNullOrWhiteSpace(phase);

        module?.InvokeVoidAsync("run", cycleTime.TotalSeconds);
        StateHasChanged();

        await Timer.StartAsync(cycleTime, phase);
    }
}