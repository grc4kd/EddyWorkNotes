@using Eddy

<div class="card" style="width: 400px;">
    <div class="card-body">
        <h3 class="card-title">Pomodoro Timer</h3>
        
        @if (IsInitialized)
        {
            <div class="mb-3">
                <p>Remaining Time: @FormatTime(RemainingTime)</p>
                <p>Current Phase: @(IsWorkTime ? "Work" : "Break")</p>
                <p>Status: @TimerStatus</p>
            </div>
            
            <button @onclick="StartTimer" class="btn btn-primary me-2" disabled="@(!CanStart)">
                Start
            </button>
            
            <button @onclick="TogglePause" class="btn btn-warning" disabled="!IsRunning">
                @(IsRunning ? "Pause" : "Resume")
            </button>
        }
    </div>
</div>

@code {
    private TaskTimer _taskTimer = new();
    private bool IsInitialized { get; set; } = false;
    private double RemainingTime { get; set; }
    private bool IsWorkTime { get; set; }
    private string TimerStatus { get; set; } = "Idle";
    private bool IsRunning 
    { 
        get => _taskTimer.IsRunning; 
        set => _taskTimer.IsRunning = value; 
    }

    protected override async Task OnInitializedAsync()
    {
        IsInitialized = true;
        
        // Initialize with work time
        _taskTimer = new TaskTimer(startWithWork: true);
        
        _taskTimer.OnTimeElapsed += (remaining) =>
        {
            RemainingTime = remaining;
            StateHasChanged();
        };
        
        _taskTimer.OnTimerCompleted += () =>
        {
            TimerStatus = $"Timer completed for {_taskTimer.IsWorkTime ? "work" : "break"}";
            IsRunning = false;
            StateHasChanged();
        };
    }

    private async Task StartTimer()
    {
        if (!IsRunning)
        {
            await _taskTimer.StartAsync();
            IsRunning = true;
            TimerStatus = $"Started {_taskTimer.IsWorkTime ? "work" : "break"} timer";
            StateHasChanged();
        }
    }

    private void TogglePause()
    {
        if (IsRunning)
        {
            _taskTimer.TogglePause();
            TimerStatus = IsRunning ? "Paused" : "Resumed";
            StateHasChanged();
        }
    }

    private string FormatTime(double seconds)
    {
        int minutes = (int)(seconds / 60);
        double remainingSeconds = seconds % 60;
        
        return $"{minutes:D2}:{remainingSeconds:N1}";
    }

    public void Dispose()
    {
        _taskTimer.DisposeAsync().GetAwaiter().GetResult();
    }
}
